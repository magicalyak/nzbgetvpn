#!/command/with-contenv bash
# shellcheck disable=SC1008
# s6-rc script for privoxy

# Exit if Privoxy is not enabled
if [[ "${ENABLE_PRIVOXY,,}" != "yes" && "${ENABLE_PRIVOXY,,}" != "true" ]]; then
  # Only print the 'disabled' message once during container lifetime.
  # Use a flag file to track if the message has already been shown.
  FLAG_FILE="/tmp/privoxy-disabled-message-shown"
  if [[ ! -f "$FLAG_FILE" ]]; then
  echo "[INFO] Privoxy is disabled (ENABLE_PRIVOXY is not 'yes' or 'true'). Exiting privoxy service script."
    touch "$FLAG_FILE"
  fi
  exit 111 # Exit with 111 to tell s6-rc this service is permanently down
fi

echo "[INFO] Starting Privoxy service..."

# Create actual config from template
CONFIG_TEMPLATE="/etc/privoxy/config.template"
ACTUAL_CONFIG="/etc/privoxy/config"

if [ ! -f "$CONFIG_TEMPLATE" ]; then
  echo "[ERROR] Privoxy config template $CONFIG_TEMPLATE not found! Cannot start Privoxy." | tee -a /var/log/privoxy/error.log # Also log to a persistent file if possible
  exit 1
fi

# Default PRIVOXY_PORT if not set (though Dockerfile ENV should handle this)
PRIVOXY_PORT=${PRIVOXY_PORT:-8118}
echo "[INFO] Privoxy will listen on port: $PRIVOXY_PORT"

sed "s/__PRIVOXY_PORT__/$PRIVOXY_PORT/g" "$CONFIG_TEMPLATE" > "$ACTUAL_CONFIG"

if [ ! -s "$ACTUAL_CONFIG" ]; then # Check if sed failed or template was bad
    echo "[ERROR] Failed to create $ACTUAL_CONFIG from $CONFIG_TEMPLATE. Check template and sed command." | tee -a /var/log/privoxy/error.log
    exit 1
fi

# Copy filter and action files from user config to where Privoxy expects them
echo "[INFO] Setting up Privoxy filter and action files..."
USER_PRIVOXY_DIR="/config/privoxy"
PRIVOXY_ETC_DIR="/etc/privoxy"

# Copy filter files if they exist
if [ -f "$USER_PRIVOXY_DIR/default.filter" ]; then
    cp "$USER_PRIVOXY_DIR/default.filter" "$PRIVOXY_ETC_DIR/"
    echo "[INFO] Copied default.filter"
fi

if [ -f "$USER_PRIVOXY_DIR/user.filter" ]; then
    cp "$USER_PRIVOXY_DIR/user.filter" "$PRIVOXY_ETC_DIR/"
    echo "[INFO] Copied user.filter"
fi

# Copy action files if they exist
if [ -f "$USER_PRIVOXY_DIR/default.action" ]; then
    cp "$USER_PRIVOXY_DIR/default.action" "$PRIVOXY_ETC_DIR/"
    echo "[INFO] Copied default.action"
fi

if [ -f "$USER_PRIVOXY_DIR/match-all.action" ]; then
    cp "$USER_PRIVOXY_DIR/match-all.action" "$PRIVOXY_ETC_DIR/"
    echo "[INFO] Copied match-all.action"
fi

if [ -f "$USER_PRIVOXY_DIR/user.action" ]; then
    cp "$USER_PRIVOXY_DIR/user.action" "$PRIVOXY_ETC_DIR/"
    echo "[INFO] Copied user.action"
fi

# Ensure log directory exists
mkdir -p /var/log/privoxy
chown privoxy:privoxy /var/log/privoxy # Use privoxy user if it exists

# Run Privoxy in the foreground, without chroot, with our config file
# The s6 supervisor will handle daemonizing and restarting.
# The --no-daemon flag is crucial for s6.
exec /usr/sbin/privoxy --no-daemon /etc/privoxy/config 
# exec /usr/sbin/privoxy --no-daemon /etc/privoxy/config >/dev/stdout 2>&1 
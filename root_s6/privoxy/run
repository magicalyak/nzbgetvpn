#!/command/with-contenv bash
# shellcheck disable=SC1008
# s6-rc script for privoxy

# Exit if Privoxy is not enabled
if [[ "${ENABLE_PRIVOXY,,}" != "yes" && "${ENABLE_PRIVOXY,,}" != "true" ]]; then
  # Only print the 'disabled' message once during container lifetime.
  # Use a flag file to track if the message has already been shown.
  FLAG_FILE="/tmp/privoxy-disabled-message-shown"
  if [[ ! -f "$FLAG_FILE" ]]; then
  echo "[INFO] Privoxy is disabled (ENABLE_PRIVOXY is not 'yes' or 'true'). Exiting privoxy service script."
    touch "$FLAG_FILE"
  fi
  exit 111 # Exit with 111 to tell s6-rc this service is permanently down
fi

echo "[INFO] Starting Privoxy service..."

# Create actual config from template
CONFIG_TEMPLATE="/etc/privoxy/config.template"
ACTUAL_CONFIG="/etc/privoxy/config"

if [ ! -f "$CONFIG_TEMPLATE" ]; then
  echo "[ERROR] Privoxy config template $CONFIG_TEMPLATE not found! Cannot start Privoxy." | tee -a /var/log/privoxy/error.log # Also log to a persistent file if possible
  exit 1
fi

# Default PRIVOXY_PORT if not set (though Dockerfile ENV should handle this)
PRIVOXY_PORT=${PRIVOXY_PORT:-8118}
echo "[INFO] Privoxy will listen on port: $PRIVOXY_PORT"

sed "s/__PRIVOXY_PORT__/$PRIVOXY_PORT/g" "$CONFIG_TEMPLATE" > "$ACTUAL_CONFIG"

if [ ! -s "$ACTUAL_CONFIG" ]; then # Check if sed failed or template was bad
    echo "[ERROR] Failed to create $ACTUAL_CONFIG from $CONFIG_TEMPLATE. Check template and sed command." | tee -a /var/log/privoxy/error.log
    exit 1
fi

# Setup filter and action files
echo "[INFO] Setting up Privoxy filter and action files..."
USER_PRIVOXY_DIR="/config/privoxy"
PRIVOXY_ETC_DIR="/etc/privoxy"

# Allow users to disable automatic file management if they have custom setups
if [[ "${PRIVOXY_SKIP_FILE_SETUP,,}" == "yes" || "${PRIVOXY_SKIP_FILE_SETUP,,}" == "true" ]]; then
    echo "[INFO] PRIVOXY_SKIP_FILE_SETUP is enabled - skipping automatic filter/action file management"
    echo "[INFO] Ensure you have proper filter and action files in place manually"
else

# Function to safely copy a file with fallback
copy_privoxy_file() {
    local filename="$1"
    local user_file="$USER_PRIVOXY_DIR/$filename"
    local etc_file="$PRIVOXY_ETC_DIR/$filename"
    
    if [ -f "$user_file" ]; then
        echo "[INFO] Using user's custom $filename"
        cp "$user_file" "$etc_file"
    elif [ ! -f "$etc_file" ]; then
        echo "[INFO] No $filename found, this may cause Privoxy startup issues"
        echo "[INFO] Consider creating $user_file for custom configuration"
    else
        echo "[INFO] Using built-in default $filename"
    fi
}

# Copy or use default files
copy_privoxy_file "default.filter"
copy_privoxy_file "user.filter"
copy_privoxy_file "default.action"
copy_privoxy_file "match-all.action"
copy_privoxy_file "user.action"

# Verify essential files exist
REQUIRED_FILES=("default.filter" "default.action")
MISSING_FILES=()

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$PRIVOXY_ETC_DIR/$file" ]; then
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -gt 0 ]; then
    echo "[WARNING] Missing required Privoxy files: ${MISSING_FILES[*]}"
    echo "[WARNING] Privoxy may fail to start. Consider adding these files to $USER_PRIVOXY_DIR"
    echo "[INFO] You can copy sample files from the container's /etc/privoxy/ directory"
fi

fi  # End of PRIVOXY_SKIP_FILE_SETUP check

# Ensure log directory exists
mkdir -p /var/log/privoxy
chown privoxy:privoxy /var/log/privoxy # Use privoxy user if it exists

# Run Privoxy in the foreground, without chroot, with our config file
# The s6 supervisor will handle daemonizing and restarting.
# The --no-daemon flag is crucial for s6.
exec /usr/sbin/privoxy --no-daemon /etc/privoxy/config 
# exec /usr/sbin/privoxy --no-daemon /etc/privoxy/config >/dev/stdout 2>&1 
name: Build and Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Matches tags like v1.2.3, v25.0.0 etc.
  schedule:
    - cron: '0 0 * * 0' # Run weekly on Sunday at midnight UTC
  workflow_dispatch: # Allow manual triggering

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/nzbgetvpn # Use repository owner for Docker Hub username

jobs:
  build-and-push:
    name: Build and Push to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to push new Git tags
      packages: write # Required for pushing to ghcr.io if used, good to have for Docker Hub too
      id-token: write # Needed for OIDC if you were to use keyless signing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4
        with:
          # Fetch all history for all tags and branches for the auto-tagging action
          fetch-depth: 0

      - name: Bump version and push tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: tag_version
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          # Ensure the action commits the tag back to the repository
          # This is often the default, but good to be mindful of.

      - name: Set up QEMU for multi-arch builds (optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container # Use a containerized builder for more features

      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Updated to v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # Updated to v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository }}
          tags: |
            # For scheduled builds
            type=schedule,pattern=nightly

            # For pushes to the main (default) branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch,enable={{is_default_branch}}
            type=sha,prefix=,suffix=,event=branch,enable={{is_default_branch}},format=short

            # For Git tags (e.g., vX.Y.Z)
            # If Git tag is "v21.1.0", these produce Docker tags:
            # "21.1.0", "21.1", "21"
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            
            # Also include the Git tag itself as a Docker tag (e.g., "v21.1.0")
            type=ref,event=tag
            # And the commit SHA for that tag
            type=sha,prefix=,suffix=,event=tag,format=short

            # Set 'latest' Docker tag to point to the highest semver Git tag.
            # Active only for Git tag events matching 'vX.Y.Z'.
          flavor: |
            latest=auto

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5 # Updated to v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }} # Do not push on PRs
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Optional: Create GitHub Release when a new Git tag is pushed
  create-release:
    needs: build-and-push # Run after build and push
    if: startsWith(github.ref, 'refs/tags/v') # Only run for tag pushes
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for release-drafter to get full commit history

      - name: Draft release notes
        id: draft_release
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml # Optional: if you have custom config
          publish: true # Automatically publish the release
          # tag: ${{ github.ref_name }} # Explicitly use the tag that triggered the workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Release URL
        run: echo "Release URL is ${{ steps.draft_release.outputs.html_url }}"

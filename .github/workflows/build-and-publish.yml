name: Build and Publish Multi-Architecture Docker Images

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Grant permissions for GITHUB_TOKEN to push to GitHub Container Registry
permissions:
  contents: read
  packages: write
  security-events: write


on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker registries'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: magicalyak/nzbgetvpn

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=nzbgetvpn
            org.opencontainers.image.description=NZBGet with VPN integration - Multi-architecture support
            org.opencontainers.image.vendor=magicalyak
            org.opencontainers.image.licenses=MIT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract platform pair
        id: platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "PLATFORM_ARCH=${platform##*/}" >> $GITHUB_ENV

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,name=${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=${{ env.PLATFORM_PAIR }}
          build-args: |
            BUILDPLATFORM=${{ matrix.platform }}
            TARGETPLATFORM=${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          # Create tags for GHCR
          GHCR_TAGS=$(echo '${{ steps.meta.outputs.tags }}' | grep ghcr.io | sed 's|.*ghcr.io/|-t ghcr.io/|g' | tr '\n' ' ')
          docker buildx imagetools create $GHCR_TAGS \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  test-multiarch:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}

      - name: Test multi-arch image
        run: |
          # Test that the image can be pulled and basic commands work
          docker pull --platform ${{ matrix.platform }} ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          
          # Test basic functionality
          docker run --rm --platform ${{ matrix.platform }} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            sh -c "
              echo 'Testing basic functionality on ${{ matrix.platform }}' &&
              python3 --version &&
              openvpn --version | head -1 &&
              wg --version &&
              curl --version | head -1 &&
              jq --version &&
              bc --version | head -1 &&
              echo 'All basic tools available'
            "

      - name: Test platform-specific optimizations
        run: |
          # Test architecture detection
          docker run --rm --platform ${{ matrix.platform }} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            sh -c "
              echo 'Architecture: $(uname -m)' &&
              echo 'Platform: $(uname -s)' &&
              cat /proc/cpuinfo | grep -E '(processor|model name|Hardware|Revision)' | head -5 || echo 'CPU info not available'
            "

  security-scan:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the entire history is fetched

      - name: Set up Trivy cache directory
        run: |
          mkdir -p ${{ github.workspace }}/.cache/trivy
          chmod -R 755 ${{ github.workspace }}/.cache/trivy

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          cache-dir: ${{ github.workspace }}/.cache/trivy

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs:
      - merge
      - test-multiarch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Docker Hub credentials
        id: validate-creds
        run: |
          if [[ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]]; then
            echo "❌ DOCKERHUB_USERNAME secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
          elif [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "❌ DOCKERHUB_TOKEN secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Docker Hub credentials are configured"
            echo "has-creds=true" >> $GITHUB_OUTPUT
          fi

      - name: Update Docker Hub README
        if: steps.validate-creds.outputs.has-creds == 'true'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
        continue-on-error: true

      - name: README update status
        run: |
          if [[ "${{ steps.validate-creds.outputs.has-creds }}" == "false" ]]; then
            echo "⚠️ Docker Hub README update skipped due to missing credentials"
            echo "Please check repository secrets: DOCKERHUB_USERNAME and DOCKERHUB_TOKEN"
          else
            echo "✅ Docker Hub README update attempted"
            echo "If it failed, check Docker Hub token permissions and expiration"
          fi

name: Build and Publish Multi-Architecture Docker Images

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Grant permissions for GITHUB_TOKEN to push to GitHub Container Registry
permissions:
  contents: write  # Changed to write for release creation
  packages: write
  security-events: write


on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker registries'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: magicalyak/nzbgetvpn

jobs:
  build:
    runs-on: ubuntu-latest
    # Only run for version tags
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=nzbgetvpn
            org.opencontainers.image.description=NZBGet with VPN integration - Multi-architecture support
            org.opencontainers.image.vendor=magicalyak
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}

      - name: Debug metadata output
        run: |
          echo "üîç Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Version: ${{ steps.meta.outputs.version }}"
          echo "Generated tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | sed 's/^/  - /'
          echo "JSON output:"
          echo '${{ steps.meta.outputs.json }}'

      - name: Validate generated tags
        run: |
          echo "üîç Validating generated tags for invalid references..."
          TAGS='${{ steps.meta.outputs.tags }}'
          
          # Check for empty tags
          if [[ -z "$TAGS" ]]; then
            echo "‚ùå ERROR: No tags generated!"
            exit 1
          fi
          
          # Split tags and validate each one
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            # Remove registry prefix for validation
            tag_name=$(echo "$tag" | sed 's/.*://')
            
            # Check for empty tag names
            if [[ -z "$tag_name" ]]; then
              echo "‚ùå ERROR: Empty tag name found in: $tag"
              exit 1
            fi
            
            # Check for invalid characters (Docker tag validation)
            if [[ ! "$tag_name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
              echo "‚ùå ERROR: Invalid tag format: $tag_name (contains invalid characters)"
              exit 1
            fi
            
            echo "‚úÖ Valid tag: $tag"
          done
          
          echo "‚úÖ All tags validated successfully!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check GHCR Rate Limit
        id: ghcr-rate-limit
        run: |
          echo "üîç Checking GHCR rate limit..."
          
          # Check GHCR rate limit using GitHub API
          RATE_LIMIT_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/rate_limit" || echo '{"rate":{"remaining":0}}')
          
          REMAINING_LIMIT=$(echo "$RATE_LIMIT_RESPONSE" | jq -r '.rate.remaining // 0')
          LIMIT_RESET=$(echo "$RATE_LIMIT_RESPONSE" | jq -r '.rate.reset // 0')
          
          echo "GHCR API rate limit remaining: $REMAINING_LIMIT"
          echo "Rate limit resets at: $(date -d @$LIMIT_RESET 2>/dev/null || echo 'Unknown')"
          
          # Set output for subsequent steps
          echo "remaining=$REMAINING_LIMIT" >> $GITHUB_OUTPUT
          echo "should_push_ghcr=true" >> $GITHUB_OUTPUT
          
          if [ "$REMAINING_LIMIT" -lt 50 ]; then
            echo "‚ö†Ô∏è WARNING: GHCR rate limit is low: $REMAINING_LIMIT remaining."
            echo "üîÑ Will proceed with retry logic to handle potential rate limiting."
          fi

      - name: Extract platform pair
        id: platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "PLATFORM_ARCH=${platform##*/}" >> $GITHUB_ENV

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,name=${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=${{ env.PLATFORM_PAIR }}
          provenance: true
          sbom: true
          build-args: |
            BUILDPLATFORM=${{ matrix.platform }}
            TARGETPLATFORM=${{ matrix.platform }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    # Only run for version tags
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Debug merge metadata output
        run: |
          echo "üîç Merge Job Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Version: ${{ steps.meta.outputs.version }}"
          echo "Generated tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | sed 's/^/  - /'
          echo "JSON output:"
          echo '${{ steps.meta.outputs.json }}'

      - name: Validate merge job tags
        run: |
          echo "üîç Validating merge job tags for invalid references..."
          TAGS='${{ steps.meta.outputs.tags }}'
          
          # Check for empty tags
          if [[ -z "$TAGS" ]]; then
            echo "‚ùå ERROR: No tags generated in merge job!"
            exit 1
          fi
          
          # Split tags and validate each one
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            # Remove registry prefix for validation
            tag_name=$(echo "$tag" | sed 's/.*://')
            
            # Check for empty tag names
            if [[ -z "$tag_name" ]]; then
              echo "‚ùå ERROR: Empty tag name found in merge job: $tag"
              exit 1
            fi
            
            # Check for invalid characters (Docker tag validation)
            if [[ ! "$tag_name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
              echo "‚ùå ERROR: Invalid tag format in merge job: $tag_name (contains invalid characters)"
              exit 1
            fi
            
            echo "‚úÖ Valid merge tag: $tag"
          done
          
          echo "‚úÖ All merge job tags validated successfully!"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          echo "üîç Creating Docker Hub manifest..."
          
          # Validate JSON output exists
          if [[ -z "$DOCKER_METADATA_OUTPUT_JSON" ]]; then
            echo "‚ùå ERROR: DOCKER_METADATA_OUTPUT_JSON is empty!"
            exit 1
          fi
          
          echo "Metadata JSON:"
          echo "$DOCKER_METADATA_OUTPUT_JSON" | jq '.'
          
          # Extract Docker Hub tags safely
          DOCKERHUB_TAGS=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -cr '.tags | map(select(contains("docker.io")) | "-t " + .) | join(" ")')
          
          if [[ -z "$DOCKERHUB_TAGS" || "$DOCKERHUB_TAGS" == "null" ]]; then
            echo "‚ùå ERROR: No Docker Hub tags found!"
            exit 1
          fi
          
          echo "Docker Hub tags to create: $DOCKERHUB_TAGS"
          
          # Create manifest
          docker buildx imagetools create --append \
            $DOCKERHUB_TAGS \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
          
          echo "‚úÖ Docker Hub manifest created successfully"

      - name: Rate Limit Mitigation Delay
        run: |
          echo "‚è±Ô∏è Adding brief delay between registry operations to reduce rate limiting..."
          sleep 5

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          echo "üîç Creating GHCR manifest..."
          
          # Validate JSON output exists
          if [[ -z "$DOCKER_METADATA_OUTPUT_JSON" ]]; then
            echo "‚ùå ERROR: DOCKER_METADATA_OUTPUT_JSON is empty for GHCR!"
            exit 1
          fi
          
          # Extract GHCR tags safely
          GHCR_TAGS=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -cr '.tags | map(select(contains("ghcr.io")) | "-t " + .) | join(" ")')
          
          if [[ -z "$GHCR_TAGS" || "$GHCR_TAGS" == "null" ]]; then
            echo "‚ö†Ô∏è WARNING: No GHCR tags found, skipping GHCR push"
            exit 0
          fi
          
          echo "GHCR tags to create: $GHCR_TAGS"
          
          # Implement retry logic with exponential backoff for rate limiting
          echo "üîÑ Pushing to GHCR with retry logic..."
          
          n=0
          max_retries=5
          base_delay=2
          
          until [ $n -ge $max_retries ]; do
            echo "Attempt $((n+1)) of $max_retries..."
            
            if docker buildx imagetools create $GHCR_TAGS \
              $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *); then
              echo "‚úÖ Successfully pushed to GHCR"
              break
            else
              exit_code=$?
              n=$((n+1))
              
              if [ $n -lt $max_retries ]; then
                delay=$((base_delay ** n))
                echo "‚ùå Push failed with exit code $exit_code. Retrying in $delay seconds..."
                sleep $delay
              else
                echo "‚ùå ERROR: Failed to push to GHCR after $max_retries attempts."
                echo "üîÑ Continuing workflow - Docker Hub push was successful"
                echo "‚ö†Ô∏è GHCR images may not be available, but Docker Hub images are ready"
                # Don't exit with error to avoid failing the entire workflow
                exit 0
              fi
            fi
          done

      - name: Verify GHCR Push (Optional)
        continue-on-error: true
        run: |
          echo "üîç Verifying GHCR push..."
          
          # Extract version for verification
          VERSION=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -r '.labels."org.opencontainers.image.version" // "latest"')
          
          if docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:$VERSION; then
            echo "‚úÖ GHCR image verified successfully"
          else
            echo "‚ö†Ô∏è WARNING: Could not verify GHCR image - may not be available due to rate limiting"
          fi

      - name: Inspect image
        run: |
          echo "üîç Inspecting published images..."
          
          # Always inspect Docker Hub (primary registry)
          echo "üì¶ Docker Hub image:"
          docker buildx imagetools inspect ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          
          # Conditionally inspect GHCR (may fail due to rate limiting)
          echo "üì¶ GHCR image:"
          if docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}; then
            echo "‚úÖ GHCR image inspection successful"
          else
            echo "‚ö†Ô∏è WARNING: GHCR image inspection failed - this is expected if GHCR push was rate limited"
            echo "üîÑ Docker Hub image is available and functional"
          fi
          
          echo "‚úÖ Image inspection completed"

  test-multiarch:
    runs-on: ubuntu-latest
    needs:
      - merge
    # Only run for version tags
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Debug metadata output
        run: |
          echo "Available tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'
          echo "Version: ${{ steps.meta.outputs.version }}"

      - name: Test multi-arch image
        run: |
          # Test that the image can be pulled and basic commands work
          docker pull --platform ${{ matrix.platform }} ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          
          # Test basic functionality
          docker run --rm --platform ${{ matrix.platform }} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            sh -c 'echo "Testing basic functionality on ${{ matrix.platform }}" && python3 --version && openvpn --version | head -1 && wg --version && curl --version | head -1 && jq --version && bc --version | head -1 && echo "All basic tools available"'

      - name: Test platform-specific optimizations
        run: |
          # Test architecture detection
          docker run --rm --platform ${{ matrix.platform }} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            sh -c 'echo "Architecture: $(uname -m)" && echo "Platform: $(uname -s)" && (cat /proc/cpuinfo | grep -E "(processor|model name|Hardware|Revision)" | head -5 || echo "CPU info not available")'

  security-scan:
    runs-on: ubuntu-latest
    needs:
      - merge
    # Only run for version tags
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Ensure the entire history is fetched

      - name: Set up Trivy cache directory
        run: |
          mkdir -p ${{ github.workspace }}/.cache/trivy
          chmod -R 755 ${{ github.workspace }}/.cache/trivy

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern=v{{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          cache-dir: ${{ github.workspace }}/.cache/trivy

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  create-release:
    runs-on: ubuntu-latest
    needs:
      - merge
      - test-multiarch
    # Only run for version tags
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Ensure the entire history is fetched

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version: $VERSION"

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Extracting changelog for $VERSION..."

          # Try to extract the changelog section for this version
          if [ -f "CHANGELOG.md" ]; then
            # Extract content between this version and the next version header
            # This handles various changelog formats
            CHANGELOG_CONTENT=$(awk -v ver="$VERSION" '
              /^##? .*'$VERSION'/ { flag=1; next }
              /^##? / && flag { exit }
              flag { print }
            ' CHANGELOG.md | sed '/^$/N;/^\n$/d' | head -20)

            if [ -z "$CHANGELOG_CONTENT" ]; then
              echo "No specific changelog found for $VERSION, using default"
              CHANGELOG_CONTENT="See commit history for detailed changes"
            fi
          else
            CHANGELOG_CONTENT="See commit history for detailed changes"
          fi

          # Save to file for multiline content
          echo "$CHANGELOG_CONTENT" > changelog_content.txt
          echo "Changelog content extracted"

      - name: Get previous tag for comparison
        id: prevtag
        run: |
          # Get the previous tag for comparison link
          CURRENT_TAG="${{ steps.version.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found"
            echo "previous_tag=" >> $GITHUB_OUTPUT
          else
            echo "Previous tag: $PREVIOUS_TAG"
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "${{ steps.version.outputs.version }} - NZBGet with VPN"
          body: |
            ## Docker Images

            Pull the latest image:
            ```bash
            docker pull magicalyak/nzbgetvpn:${{ steps.version.outputs.version }}
            ```

            Or use the `latest` tag:
            ```bash
            docker pull magicalyak/nzbgetvpn:latest
            ```

            ## What's Changed
            ${{ steps.changelog.outputs.content || 'See commit history for detailed changes' }}

            ## Full Changelog
            ${{ steps.prevtag.outputs.previous_tag && format('https://github.com/{0}/compare/{1}...{2}', github.repository, steps.prevtag.outputs.previous_tag, steps.version.outputs.version) || format('https://github.com/{0}/commits/{1}', github.repository, steps.version.outputs.version) }}

            ## Container Registries
            - Docker Hub: [`magicalyak/nzbgetvpn:${{ steps.version.outputs.version }}`](https://hub.docker.com/r/magicalyak/nzbgetvpn)
            - GitHub Container Registry: [`ghcr.io/magicalyak/nzbgetvpn:${{ steps.version.outputs.version }}`](https://github.com/magicalyak/nzbgetvpn/pkgs/container/nzbgetvpn)
          draft: false
          prerelease: false
          generate_release_notes: true

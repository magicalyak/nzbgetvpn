name: Build and Publish Docker Image

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # More specific SEMVER pattern
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/nzbgetvpn

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full history for all branches and tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug environment
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Owner: ${{ github.repository_owner }}"
          echo "Image: ${{ env.IMAGE_NAME }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag is on main branch
        id: check_tag_on_main
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Check if the tag points to a commit that is an ancestor of main
          # git merge-base --is-ancestor <commit> <ref> exits 0 if true, 1 if false
          # We use github.ref_name for the tag
          # We need to fetch main to ensure we have its latest state
          git fetch origin main
          if git merge-base --is-ancestor ${{ github.ref_name }} origin/main; then
            echo "Tag ${{ github.ref_name }} is on main branch."
            echo "is_on_main=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ github.ref_name }} is NOT on main branch."
            echo "is_on_main=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository }}
          tags: |
            # For pushes to the main branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short,prefix=sha-,enable=${{ github.ref == 'refs/heads/main' }}

            # For Git tag pushes (e.g., v1.2.3)
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') && steps.check_tag_on_main.outputs.is_on_main == 'true' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') && steps.check_tag_on_main.outputs.is_on_main == 'true' }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') && steps.check_tag_on_main.outputs.is_on_main == 'true' }}
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/v') && steps.check_tag_on_main.outputs.is_on_main == 'true' }} # Adds the tag itself, e.g., v1.2.3
          flavor: |
            latest=auto

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # Optional: Create GitHub Release when a new Git tag is pushed
  create-release:
    needs: build-and-push # Run after build and push
    if: startsWith(github.ref, 'refs/tags/v') # Only run for tag pushes
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for release-drafter to get full commit history

      - name: Draft release notes
        id: draft_release
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml # Optional: if you have custom config
          publish: true # Automatically publish the release
          # tag: ${{ github.ref_name }} # Explicitly use the tag that triggered the workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Release URL
        run: echo "Release URL is ${{ steps.draft_release.outputs.html_url }}"

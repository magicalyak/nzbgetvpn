name: Build and Publish Multi-Architecture Docker Images

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Grant permissions for GITHUB_TOKEN to push to GitHub Container Registry
permissions:
  contents: read
  packages: write
  security-events: write


on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Build nightly at 2 AM UTC (useful for security patches)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker registries'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: magicalyak/nzbgetvpn

jobs:
  build:
    runs-on: ubuntu-latest
    # Skip scheduled builds for PRs and non-main branches (except for tags)
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Docker Hub credentials
        id: validate-creds
        if: github.event_name != 'pull_request'
        run: |
          if [[ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]]; then
            echo "‚ùå DOCKERHUB_USERNAME secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
            exit 1
          elif [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "‚ùå DOCKERHUB_TOKEN secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Docker Hub credentials are configured"
            echo "has-creds=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug registry information
        if: github.event_name != 'pull_request'
        run: |
          echo "Using Docker Hub registry: ${{ env.REGISTRY_DOCKERHUB }}"
          echo "Using image name: ${{ env.IMAGE_NAME }}"
          echo "Username length: ${#DOCKERHUB_USERNAME}"
          echo "Token length: ${#DOCKERHUB_TOKEN}"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=raw,value=stable,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=schedule,pattern={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'schedule' }}
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'push' }}
          labels: |
            org.opencontainers.image.title=nzbgetvpn
            org.opencontainers.image.description=NZBGet with VPN integration - Multi-architecture support
            org.opencontainers.image.vendor=magicalyak
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}

      - name: Debug metadata output
        run: |
          echo "üîç Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Version: ${{ steps.meta.outputs.version }}"
          echo "Generated tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | sed 's/^/  - /'
          echo "JSON output:"
          echo '${{ steps.meta.outputs.json }}'

      - name: Validate generated tags
        run: |
          echo "üîç Validating generated tags for invalid references..."
          TAGS='${{ steps.meta.outputs.tags }}'
          
          # Check for empty tags
          if [[ -z "$TAGS" ]]; then
            echo "‚ùå ERROR: No tags generated!"
            exit 1
          fi
          
          # Split tags and validate each one
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            # Remove registry prefix for validation
            tag_name=$(echo "$tag" | sed 's/.*://')
            
            # Check for empty tag names
            if [[ -z "$tag_name" ]]; then
              echo "‚ùå ERROR: Empty tag name found in: $tag"
              exit 1
            fi
            
            # Check for invalid characters (Docker tag validation)
            if [[ ! "$tag_name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
              echo "‚ùå ERROR: Invalid tag format: $tag_name (contains invalid characters)"
              exit 1
            fi
            
            echo "‚úÖ Valid tag: $tag"
          done
          
          echo "‚úÖ All tags validated successfully!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract platform pair
        id: platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "PLATFORM_ARCH=${platform##*/}" >> $GITHUB_ENV

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,name=${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=${{ env.PLATFORM_PAIR }}
          build-args: |
            BUILDPLATFORM=${{ matrix.platform }}
            TARGETPLATFORM=${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=raw,value=stable,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=schedule,pattern={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'schedule' }}
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'push' }}

      - name: Debug merge metadata output
        run: |
          echo "üîç Merge Job Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref type: ${{ github.ref_type }}"
          echo "Version: ${{ steps.meta.outputs.version }}"
          echo "Generated tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | sed 's/^/  - /'
          echo "JSON output:"
          echo '${{ steps.meta.outputs.json }}'

      - name: Validate merge job tags
        run: |
          echo "üîç Validating merge job tags for invalid references..."
          TAGS='${{ steps.meta.outputs.tags }}'
          
          # Check for empty tags
          if [[ -z "$TAGS" ]]; then
            echo "‚ùå ERROR: No tags generated in merge job!"
            exit 1
          fi
          
          # Split tags and validate each one
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            # Remove registry prefix for validation
            tag_name=$(echo "$tag" | sed 's/.*://')
            
            # Check for empty tag names
            if [[ -z "$tag_name" ]]; then
              echo "‚ùå ERROR: Empty tag name found in merge job: $tag"
              exit 1
            fi
            
            # Check for invalid characters (Docker tag validation)
            if [[ ! "$tag_name" =~ ^[a-zA-Z0-9._-]+$ ]]; then
              echo "‚ùå ERROR: Invalid tag format in merge job: $tag_name (contains invalid characters)"
              exit 1
            fi
            
            echo "‚úÖ Valid merge tag: $tag"
          done
          
          echo "‚úÖ All merge job tags validated successfully!"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          echo "üîç Creating Docker Hub manifest..."
          
          # Validate JSON output exists
          if [[ -z "$DOCKER_METADATA_OUTPUT_JSON" ]]; then
            echo "‚ùå ERROR: DOCKER_METADATA_OUTPUT_JSON is empty!"
            exit 1
          fi
          
          echo "Metadata JSON:"
          echo "$DOCKER_METADATA_OUTPUT_JSON" | jq '.'
          
          # Extract Docker Hub tags safely
          DOCKERHUB_TAGS=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -cr '.tags | map(select(contains("docker.io")) | "-t " + .) | join(" ")')
          
          if [[ -z "$DOCKERHUB_TAGS" || "$DOCKERHUB_TAGS" == "null" ]]; then
            echo "‚ùå ERROR: No Docker Hub tags found!"
            exit 1
          fi
          
          echo "Docker Hub tags to create: $DOCKERHUB_TAGS"
          
          # Create manifest
          docker buildx imagetools create $DOCKERHUB_TAGS \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Create additional version tags for semver
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: /tmp/digests
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Creating additional version tags for: $VERSION"
          
          # Create version tags manually
          DIGESTS=$(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
          
          # Full version tag (e.g., v25.0.34)
          docker buildx imagetools create -t ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:v${VERSION} $DIGESTS
          
          # Version without v prefix (e.g., 25.0.34)  
          docker buildx imagetools create -t ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${VERSION} $DIGESTS
          
          # Major.minor version (e.g., 25.0)
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1-2)
          docker buildx imagetools create -t ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${MAJOR_MINOR} $DIGESTS
          docker buildx imagetools create -t ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:v${MAJOR_MINOR} $DIGESTS
          
          # Major version (e.g., 25)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          docker buildx imagetools create -t ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${MAJOR} $DIGESTS
          docker buildx imagetools create -t ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:v${MAJOR} $DIGESTS
          
          echo "‚úÖ Created version tags: v${VERSION}, ${VERSION}, ${MAJOR_MINOR}, v${MAJOR_MINOR}, ${MAJOR}, v${MAJOR}"

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          echo "üîç Creating GHCR manifest..."
          
          # Validate JSON output exists
          if [[ -z "$DOCKER_METADATA_OUTPUT_JSON" ]]; then
            echo "‚ùå ERROR: DOCKER_METADATA_OUTPUT_JSON is empty for GHCR!"
            exit 1
          fi
          
          # Extract GHCR tags safely
          GHCR_TAGS=$(echo "$DOCKER_METADATA_OUTPUT_JSON" | jq -cr '.tags | map(select(contains("ghcr.io")) | "-t " + .) | join(" ")')
          
          if [[ -z "$GHCR_TAGS" || "$GHCR_TAGS" == "null" ]]; then
            echo "‚ö†Ô∏è WARNING: No GHCR tags found, skipping GHCR push"
            exit 0
          fi
          
          echo "GHCR tags to create: $GHCR_TAGS"
          
          # Create GHCR manifest
          docker buildx imagetools create $GHCR_TAGS \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  test-multiarch:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=raw,value=stable,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=schedule,pattern={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'schedule' }}
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'push' }}

      - name: Debug metadata output
        run: |
          echo "Available tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'
          echo "Version: ${{ steps.meta.outputs.version }}"

      - name: Test multi-arch image
        run: |
          # Test that the image can be pulled and basic commands work
          docker pull --platform ${{ matrix.platform }} ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          
          # Test basic functionality
          docker run --rm --platform ${{ matrix.platform }} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            sh -c 'echo "Testing basic functionality on ${{ matrix.platform }}" && python3 --version && openvpn --version | head -1 && wg --version && curl --version | head -1 && jq --version && bc --version | head -1 && echo "All basic tools available"'

      - name: Test platform-specific optimizations
        run: |
          # Test architecture detection
          docker run --rm --platform ${{ matrix.platform }} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            sh -c 'echo "Architecture: $(uname -m)" && echo "Platform: $(uname -s)" && (cat /proc/cpuinfo | grep -E "(processor|model name|Hardware|Revision)" | head -5 || echo "CPU info not available")'

  security-scan:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the entire history is fetched

      - name: Set up Trivy cache directory
        run: |
          mkdir -p ${{ github.workspace }}/.cache/trivy
          chmod -R 755 ${{ github.workspace }}/.cache/trivy

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=raw,value=stable,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=schedule,pattern={{date 'YYYYMMDD'}},enable=${{ github.event_name == 'schedule' }}
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'push' }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          cache-dir: ${{ github.workspace }}/.cache/trivy

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs:
      - merge
      - test-multiarch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Docker Hub credentials
        id: validate-creds
        run: |
          if [[ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]]; then
            echo "‚ùå DOCKERHUB_USERNAME secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
          elif [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "‚ùå DOCKERHUB_TOKEN secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Docker Hub credentials are configured"
            echo "has-creds=true" >> $GITHUB_OUTPUT
          fi

      - name: Update Docker Hub README
        if: steps.validate-creds.outputs.has-creds == 'true'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
        continue-on-error: true

      - name: README update status
        run: |
          if [[ "${{ steps.validate-creds.outputs.has-creds }}" == "false" ]]; then
            echo "‚ö†Ô∏è Docker Hub README update skipped due to missing credentials"
            echo "Please check repository secrets: DOCKERHUB_USERNAME and DOCKERHUB_TOKEN"
          else
            echo "‚úÖ Docker Hub README update attempted"
            echo "If it failed, check Docker Hub token permissions and expiration"
          fi

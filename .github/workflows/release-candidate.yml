name: Build Release Candidate

on:
  push:
    branches:
      - 'release/*'
      - 'hotfix/*'
  workflow_dispatch:
    inputs:
      rc_version:
        description: 'Release candidate version (e.g., v25.0.31-rc.1)'
        required: true
        type: string

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: magicalyak/nzbgetvpn

jobs:
  build-rc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Docker Hub credentials
        id: validate-creds
        run: |
          if [[ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]]; then
            echo "❌ DOCKERHUB_USERNAME secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
            exit 1
          elif [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "❌ DOCKERHUB_TOKEN secret is not set"
            echo "has-creds=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Docker Hub credentials are configured"
            echo "has-creds=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-rc
            type=raw,value=${{ github.event.inputs.rc_version }},enable=${{ github.event.inputs.rc_version != '' }}
            type=raw,value=rc-latest
            type=sha,prefix=rc-{{branch}}-
          labels: |
            org.opencontainers.image.title=nzbgetvpn
            org.opencontainers.image.description=NZBGet with VPN integration - Release Candidate
            org.opencontainers.image.vendor=magicalyak
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract platform pair
        id: platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Build Release Candidate
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,name=${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ env.PLATFORM_PAIR }}-rc
          cache-to: type=gha,mode=max,scope=${{ env.PLATFORM_PAIR }}-rc
          build-args: |
            BUILDPLATFORM=${{ matrix.platform }}
            TARGETPLATFORM=${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-rc-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-rc:
    runs-on: ubuntu-latest
    needs:
      - build-rc
    
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-rc-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-rc
            type=raw,value=${{ github.event.inputs.rc_version }},enable=${{ github.event.inputs.rc_version != '' }}
            type=raw,value=rc-latest
            type=sha,prefix=rc-{{branch}}-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map(select(contains("docker.io")) | "-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          GHCR_TAGS=$(jq -cr '.tags | map(select(contains("ghcr.io")) | "-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
          docker buildx imagetools create $GHCR_TAGS \
            $(printf '${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect Release Candidate
        run: |
          echo "✅ Release Candidate built successfully!"
          echo "Available tags:"
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n'
          
          # Test that images are accessible
          if [[ "${{ steps.meta.outputs.version }}" != "" ]]; then
            docker buildx imagetools inspect ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          fi 
# Telegraf Configuration for nzbgetvpn monitoring

[global_tags]
  # Add global tags for all metrics
  service = "nzbgetvpn"

[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB 2.0
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Collect metrics from nzbgetvpn monitoring endpoint (JSON format)
[[inputs.http]]
  name_override = "nzbgetvpn_metrics"
  urls = ["http://nzbgetvpn:8080/metrics"]
  timeout = "10s"
  method = "GET"
  data_format = "json_v2"
  interval = "30s"
  
  [[inputs.http.json_v2]]
    measurement_name = "nzbgetvpn_summary"
    [[inputs.http.json_v2.object]]
      path = "summary"
      tags = ["check_type"]
      fields = ["success_rate", "total_checks", "avg_response_time", "max_response_time", "last_status"]

# Collect health status from nzbgetvpn
[[inputs.http]]
  name_override = "nzbgetvpn_health"
  urls = ["http://nzbgetvpn:8080/health"]
  timeout = "5s"
  method = "GET"
  data_format = "json_v2"
  interval = "15s"
  
  [[inputs.http.json_v2]]
    measurement_name = "nzbgetvpn_health_status"
    [[inputs.http.json_v2.field]]
      path = "status"
      rename = "overall_status"
    [[inputs.http.json_v2.field]]
      path = "message"
      rename = "status_message"
    [[inputs.http.json_v2.object]]
      path = "checks"
      tags = ["check_name"]

# Collect detailed status information
[[inputs.http]]
  name_override = "nzbgetvpn_status"
  urls = ["http://nzbgetvpn:8080/status"]
  timeout = "10s"
  method = "GET"
  data_format = "json_v2"
  interval = "60s"
  
  [[inputs.http.json_v2]]
    measurement_name = "nzbgetvpn_system"
    [[inputs.http.json_v2.field]]
      path = "uptime.seconds"
      rename = "uptime_seconds"
    [[inputs.http.json_v2.field]]
      path = "system.memory.total"
      rename = "memory_total"
    [[inputs.http.json_v2.field]]
      path = "system.memory.used"
      rename = "memory_used"
    [[inputs.http.json_v2.field]]
      path = "system.memory.usage_percent"
      rename = "memory_usage_percent"
    [[inputs.http.json_v2.field]]
      path = "system.load_average.1min"
      rename = "load_1min"
    [[inputs.http.json_v2.field]]
      path = "system.load_average.5min"
      rename = "load_5min"
    [[inputs.http.json_v2.field]]
      path = "system.load_average.15min"
      rename = "load_15min"
    [[inputs.http.json_v2.field]]
      path = "nzbget.responsive"
      rename = "nzbget_responsive"
    [[inputs.http.json_v2.field]]
      path = "network.external_ip"
      rename = "external_ip"

# Alternative: Collect Prometheus-format metrics from nzbgetvpn
[[inputs.prometheus]]
  urls = ["http://nzbgetvpn:8080/prometheus"]
  metric_version = 2
  interval = "30s" 
version: "3.8"

services:
  nzbgetvpn:
    image: magicalyak/nzbgetvpn:latest
    container_name: nzbgetvpn
    env_file: .env
    ports:
      - "6789:6789"          # NZBGet Web UI
      - "8080:8080"          # Monitoring (optional)
      # - "8118:8118"        # Privoxy (uncomment if ENABLE_PRIVOXY=yes)
    volumes:
      # Adjust these paths to match your setup
      - ./config:/config     # NZBGet config and VPN files
      - ./downloads:/downloads # Downloads directory
    devices:
      - /dev/net/tun         # Required for VPN functionality
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

# Quick Start:
# 1. Copy .env.sample to .env and configure your settings
# 2. Create config/ and downloads/ directories
# 3. Place your VPN config in config/openvpn/ or config/wireguard/
# 4. Run: docker-compose up -d
# 5. Access NZBGet at http://localhost:6789

# Monitoring Endpoints (if ENABLE_MONITORING=yes):
# - Health check: http://localhost:8080/health
# - Prometheus metrics: http://localhost:8080/prometheus
# - Status info: http://localhost:8080/status
# - Logs: http://localhost:8080/logs

# Notes on Volumes:
# The example paths `./data/config` and `./data/downloads` assume you have a 'data' subdirectory
# in the same directory as this docker-compose.yml file, and inside 'data', you have 'config' and 'downloads'.
# You MUST adjust these paths to point to the actual locations on your Docker host where you intend
# to store your persistent data, mirroring the HOST_DATA_DIR concept from the docker run examples.
# For instance, if your data is in /srv/nzbgetvpn_data:
#   volumes:
#     - /srv/nzbgetvpn_data/config:/config
#     - /srv/nzbgetvpn_data/downloads:/downloads

# Notes on .env file:
# This docker-compose.yml relies on a .env file in the same directory to supply
# all necessary environment variables (PUID, PGID, TZ, VPN_CLIENT, VPN_CONFIG, etc.).
# Ensure your .env file is correctly configured as per the .env.sample provided
# in the repository. 